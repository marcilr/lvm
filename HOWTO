HOWTO
Created Fri Jul 13 10:19:47 AKDT 2012
Copyright (C) 2012 by Raymond E. Marcil <marcilr@gmail.com>


LVM (Logical Volume Manager) HOWTO


Sections
========
o Create "backups" LVM
o Initializing disks or disk partitions
o Creating a volume group
o Activating a volume group
o Adding physical volumes to a volume group
o Removing physical volumes from a volume group
o Creating a logical volume
o Extending a logical volume
o Removing a logical volume
o Removing a volume group


Create "backups" LVM
====================
Configured RAID5, with 4x Seagate ST31000340NS 1TB drives, attached to 9650SE-8LPML on bornite.
Need to configure a "backups" LVM for routine backups of the c0 unit (on 9650SE-16ML controller)
to the c5 unit on the 9650SE-8LPML controller.

# tw_cli info

Ctl   Model        (V)Ports  Drives   Units   NotOpt  RRate   VRate  BBU
------------------------------------------------------------------------
c0    9650SE-16ML  16        8        1       0       1       1      OK       
c5    9650SE-8LPML 8         4        1       0       1       1      OK       

#

1. Initialize physical volume on /dev/sdd1 partition using pvcreate.

# pvcreate /dev/sdd1
  Physical volume "/dev/sdd1" successfully created
#

This creates a volume group descriptor at the start of the /dev/sdd1 partition. 

# pvdisplay
...
  "/dev/sdd1" is a new physical volume of "2.73 TiB"
  --- NEW Physical volume ---
  PV Name               /dev/sdd1
  VG Name               
  PV Size               2.73 TiB
...
#

2. Create backups volume group on /dev/sdd1 using vgcreate.

# vgcreate backups /dev/sdd1
  Volume group "backups" successfully created
#

# vgdisplay
  --- Volume group ---
  VG Name               backups
...
  VG Size               2.73 TiB
  PE Size               4.00 MiB
...
#

Looks good.

3. Activate "backups" volume group.
# vgchange -a y backups
  0 logical volume(s) in volume group "backups" now active
#

NOTE: Don't think this was necessary.  Likely active after creation.

3. Create backups lvm using lvcreate.

Want to use entire "backups" VG for the "backups" lvm.  Use vgdisplay to find the "Total PE"
size for "backups" VG.

# vgdisplay backups | grep "Total PE"
  Total PE              715247          <== Total size of "backups" VG.
#

Create "backups" LV in "backups" VG.
# lvcreate -l 715247 backups -n backups
  Logical volume "backups" created
#

This creates the "backups" LV filling the entire "backups" VG.

# vgdisplay
  --- Volume group ---
  VG Name               backups
  ...
  VG Size               2.73 TiB
  PE Size               4.00 MiB
  Total PE              715247
  Alloc PE / Size       715247 / 2.73 TiB
  Free  PE / Size       0 / 0
  ...
#

Appears to have worked.

4. Format "backups" LV ext3.

# mkfs.ext3 /dev/backups/backups
mke2fs 1.41.12 (17-May-2010)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
183107584 inodes, 732412928 blocks
36620646 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=4294967296
22352 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks: 
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
        4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, 
        102400000, 214990848, 512000000, 550731776, 644972544

Writing inode tables: 950/22352
...



Initializing disks or disk partitions
=====================================
Before you can use a disk or disk partition as a physical volume you will have to initialize it.

Use pvcreate to initialize a disk or disk partition.

Run pvcreate on the disk:
# pvcreate /dev/hdb

This creates a volume group descriptor at the start of disk.

NOTE: Using the whole disk as a PV (as opposed to a partition spanning the whole disk) is not
recommended because of the management issues it can create.  Any other OS that looks at the disk
will not recognize the LVM metadata and display the disk as being free, so it is likely it will be
overwritten.  LVM itself will work fine with whole disk PVs. 

Run pvcreate on the partition:
# pvcreate /dev/hdb1

This creates a volume group descriptor at the start of the /dev/hdb1 partition.


Creating a volume group
=======================
Use the 'vgcreate' program:

# vgcreate my_volume_group /dev/hda1 /dev/hdb1 

NOTE: LVM allows for absorbing or ejecting disks from the volume group.
      Similar to RAID0.


Activating a volume group
=========================
After rebooting the system or running vgchange -an, you will not be able to access your
VGs and LVs. To reactivate the volume group, run: 

# vgchange -a y my_volume_group


Adding physical volumes to a volume group
=========================================
Use 'vgextend' to add an initialized physical volume to an existing volume group.

# vgextend my_volume_group /dev/hdc1
                                    ^^^^^^^^^ new physical volume


Removing physical volumes from a volume group
=============================================
Make sure that the physical volume isn't used by any logical volumes by using then 'pvdisplay'
command:

# pvdisplay /dev/hda1

--- Physical volume ---
PV Name               /dev/hda1
VG Name               myvg
PV Size               1.95 GB / NOT usable 4 MB [LVM: 122 KB]
PV#                   1
PV Status             available
Allocatable           yes (but full)
Cur LV                1
PE Size (KByte)       4096
Total PE              499
Free PE               0
Allocated PE          499
PV UUID               Sd44tK-9IRw-SrMC-MOkn-76iP-iftz-OVSen7


If the physical volume is still used you will have to migrate the data to another physical volume
using pvmove.

Then use 'vgreduce' to remove the physical volume:

# vgreduce my_volume_group /dev/hda1
        

Creating a logical volume
=========================
To create a 1500MB linear LV named 'testlv' and its block device special '/dev/testvg/testlv':
# lvcreate -L1500 -ntestlv testvg
        
To create a 100 LE large logical volume with 2 stripes and stripe size 4 KB.
# lvcreate -i2 -I4 -l100 -nanothertestlv testvg
        
If you want to create an LV that uses the entire VG, use vgdisplay to find the "Total PE" size, 
then use that when running lvcreate.

# vgdisplay testvg | grep "Total PE"
Total PE              10230
# lvcreate -l 10230 testvg -n mylv
        
This will create an LV called mylv filling the testvg VG.

If you want the logical volume to be allocated from a specific physical volume in the volume group,
specify the PV or PVs at the end of the lvcreate command line.
# lvcreate -L 1500 -ntestlv testvg /dev/sdg


Extending a logical volume
==========================
To extend a logical volume you simply tell the lvextend command how much you want to increase the
size.  You can specify how much to grow the volume, or how large you want it to grow to:

# lvextend -L12G /dev/myvg/homevol
lvextend -- extending logical volume "/dev/myvg/homevol" to 12 GB
lvextend -- doing automatic backup of volume group "myvg"
lvextend -- logical volume "/dev/myvg/homevol" successfully extended
        
will extend /dev/myvg/homevol to 12 Gigabytes.

# lvextend -L+1G /dev/myvg/homevol
lvextend -- extending logical volume "/dev/myvg/homevol" to 13 GB
lvextend -- doing automatic backup of volume group "myvg"
lvextend -- logical volume "/dev/myvg/homevol" successfully extended
        
will add another gigabyte to /dev/myvg/homevol.

After you have extended the logical volume it is necessary to increase the file system size to
match. how you do this depends on the file system you are using.

By default, most file system resizing tools will increase the size of the file system to be the
size of the underlying logical volume so you don't need to worry about specifying the same size
for each of the two commands.

ext2/ext3
---------
Unless you have patched your kernel with the ext2online patch it is necessary to unmount the file
system before resizing it.  (It seems that the online resizing patch is rather dangerous, so use
at your own risk)

# umount /dev/myvg/homevol/dev/myvg/homevol
# resize2fs /dev/myvg/homevol
# mount /dev/myvg/homevol /home


Removing a logical volume
=========================
A logical volume must be closed before it can be removed:

# umount /dev/myvg/homevol
# lvremove /dev/myvg/homevol
lvremove -- do you really want to remove "/dev/myvg/homevol"? [y/n]: y
lvremove -- doing automatic backup of volume group "myvg"
lvremove -- logical volume "/dev/myvg/homevol" successfully removed

tldp.org/

Example (remove backups lvm on bornite):

# lvremove /dev/backups/backups 
Do you really want to remove active logical volume backups? [y/n]: y
  Logical volume "backups" successfully removed
# 


Removing a volume group
=======================
Make sure that no logical volumes are present in the volume group, see later section for how to do
this.

Deactivate the volume group:
# vgchange -a n my_volume_group

Now you actually remove the volume group:
# vgremove my_volume_group

Example (remove backups volume group on bornite):

Deactivate the volume group: 
# vgchange -a n backups
  0 logical volume(s) in volume group "backups" now active
#
        
Now you actually remove the volume group:
# vgremove backups
  Volume group "backups" successfully removed
#



Links
=====
LVM HOWTO
http://tldp.org/HOWTO/LVM-HOWTO/

11.1. Initializing disks or disk partitions
http://tldp.org/HOWTO/LVM-HOWTO/initdisks.html

11.3. Activating a volume group
http://tldp.org/HOWTO/LVM-HOWTO/activatevgs.html

11.4. Removing a volume group
http://tldp.org/HOWTO/LVM-HOWTO/removevgs.html

11.5. Adding physical volumes to a volume group
http://tldp.org/HOWTO/LVM-HOWTO/addpvstovg.html

11.6. Removing physical volumes from a volume group
http://tldp.org/HOWTO/LVM-HOWTO/removepvsfromvg.html

11.7. Creating a logical volume
http://tldp.org/HOWTO/LVM-HOWTO/createlv.html

11.8. Removing a logical volume
http://tldp.org/HOWTO/LVM-HOWTO/removelv.html

11.9. Extending a logical volume
http://tldp.org/HOWTO/LVM-HOWTO/extendlv.html

Logical volume management
From Wikipedia, the free encyclopedia
http://en.wikipedia.org/wiki/Logical_volume_management

Logical Volume Manager (Linux)
From Wikipedia, the free encyclopedia
http://en.wikipedia.org/wiki/Logical_Volume_Manager_%28Linux%29

Linux LVM (Logical Volume Management)
Solid instruictions on entire LVM process.
http://www.novell.com/communities/node/4063/linux-lvm-logical-volume-management
