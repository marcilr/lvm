resize-volume.txt
Created Fri Jan 22 09:34:47 AKST 2010
by Raymond Marcil <marcilr@gmail.com>


Resizing a logical volumes comes down to a few simple steps:

Expand volume
=============
1. Take backup data on volume to expand.

Rsync can be used to make the backup:
# rsync -va --delete /data/myvolume /backups/data/

NOTE: Lack of trailing slash on /data/virtualbox such that the virtualbox directory itself
      will be created under /backups/data/ as needed.

Options:
        -v, --verbose     increase verbosity
        -a, --archive     archive mode; equals -rlptgoD (no -H,-A,-X)
            --delete      delete extraneous files from dest dir

NOTE: Lack of trailing slash on /data/virtualbox such that the virtualbox directory
      itself will be created under /backups/data/ as needed.

Get md5sum of all regular files, sort, and save to MD5SUM
$ find . -type f -exec md5sum {} \; | sort -k2 >> MD5SUM


2. Unmount volume:
# umount /dev/mygroup/myvolume

3. The resizefs utility requires e2fsck first:

# e2fsck -f /dev/mygroup/myvolume
e2fsck 1.41.12 (17-May-2010)
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information
/dev/mygroup/myvolume: 48/19660800 files (6.3% non-contiguous), 67580459/78643200 blocks
#

4. Expand the logical volume using lvextend:

# lvextend -L400G /dev/mygroup/myvolume
  Extending logical volume myvolume to 400.00 GiB
  Logical volume myvolume successfully resized
#

In this example myvolume was expanded to 400GB.

5. Use resize2fs to expand ext2/ext3/ext4 filesystem:

# resize2fs /dev/mygroup/myvolume 400G
resize2fs 1.41.12 (17-May-2010)
Resizing the filesystem on /dev/mygroup/myvolume to 104857600 (4k) blocks.
The filesystem on /dev/mygroup/myvolume is now 104857600 blocks long.

bornite:/#

In this example myvolume was expanded to 400GB.

6. Mount resized  /dev/mygroup/myvolume:

bornite:/# mount /mygroup/myvolume/

NOTE: Assume /mygroup/myvolume/ is a mount point in fstab.


Reduce volume
=============
1. Take backup data on volume to reduce.

2. Unmount volume:
# umount /dev/mygroup/myvolume

3. The resizefs utility requires e2fsck first:

# e2fsck -f /dev/mygroup/myvolume
e2fsck 1.41.12 (17-May-2010)
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information
/dev/mygroup/myvolume: 48/19660800 files (6.3% non-contiguous), 67580459/78643200 blocks
#

4. Reduce the size of the ext2/ext3/ext4 filesystem on the volume using resize2fs:

Resize /dev/mygroup/myvolume from 1TB to 500GB:
bornite:~# resize2fs /dev/mygroup/myvolume 500G
resize2fs 1.40-WIP (14-Nov-2006)
Resizing the filesystem on /dev/mygroup/myvolume to 131072000 (4k) blocks.
The filesystem on /dev/mygroup/myvolume is now 131072000 blocks long.
bornite:~#

5. Reduce /dev/mygroup/myvolume from 1TB to 500GB:
bornite:~# lvreduce -L500G /dev/mygroup/myvolume
  WARNING: Reducing active logical volume to 500.00 GB
  THIS MAY DESTROY YOUR DATA (filesystem etc.)
Do you really want to reduce myvolume? [y/n]: y
  Reducing logical volume myvolume to 500.00 GB
  Logical volume music successfully resized
bornite:~#

6. Mount resized  /dev/mygroup/myvolume:

bornite:/# mount /mygroup/myvolume/

NOTE: Assume /mygroup/myvolume/ is a mount point in fstab.



Packages
========
$ apt-cache search resize2fs
system-config-lvm - A utility for graphically configuring Logical Volumes

marcilr@bornite:~$ dpkg -l | grep lvm
ii  lvm-common   1.5.20           The Logical Volume Manager for Linux (common
ii  lvm2         2.02.06-4etch1   The Linux Logical Volume Manager


resize2fs - ext2/ext3 file system resizer
=========================================
resize2fs [ -fFpPM ] [ -d debug-flags ] [ -S RAID-stride ] device [ size ]

The resize2fs program will resize ext2 or ext3 file systems.  It can be used to enlarge or shrink 
an unmounted file system located on device.  If the filesystem is mounted,  it can be used to 
expand the size of the mounted filesystem, assuming the kernel supports on-line resizing.  
(As of this writing, the Linux 2.6 kernel supports on-line resize for filesystems mounted 
using ext3 only.).

The size parameter specifies the requested new size of the filesystem.  If no units are specified,
the units of the size parameter shall be the filesystem blocksize of the filesystem.  Optionally,
the size parameter may be suffixed by one of the following the units designators: s, K, M, or G,
for 512 byte sectors, kilobytes, megabytes, or gigabytes, respectively. The size of the filesystem
may never be larger than the size of the partition.  If size parameter is not specified, it 
will default to the size of the partition.

The resize2fs program does not manipulate the size of partitions.  If you wish to enlarge a 
filesystem, you must make sure you can expand the size of the underlying partition first.  This
can be done using fdisk(8) by deleting the partition and recreating it with a larger size or using
lvextend(8), if you're using the logical volume manager lvm(8). When recreating the partition, 
make sure you create it with the same starting disk cylinder as before! Otherwise, the resize
operation will certainly not work, and you may lose your entire filesystem.  After running 
fdisk(8), run resize2fs to resize the ext2 filesystem to use all of the space in the newly 
enlarged partition.

If you wish to shrink an ext2 partition, first use resize2fs to shrink the size of filesystem. 
Then you may use fdisk(8) to shrink the size of the partition.  When shrinking the size of the
partition, make sure you do not make it smaller than the new size of the ext2 filesystem!

from: resize2fs manpage


lvreduce - reduce the size of a logical volume
==============================================
lvreduce  [-A/--autobackup  y/n]  [-d/--debug]  [-f/--force]  [-h/-?/--help] {-l/--extents
[-]LogicalExtentsNumber[%{VG|LV|FREE}] | -L/--size [-]LogicalVolumeSize[kKmMgGtT]}
[-t/--test] [-v/--verbose] LogicalVolume[Path]

lvreduce allows you to reduce the size of a logical volume. Be careful when reducing a logical
volume's size, because data in the reduced part is lost!!! You should therefore ensure that any 
filesystem on the volume is resized before running lvreduce so that the extents that are to 
be removed are not in use. Shrinking snapshot logical volumes (see lvcreate(8) for information to 
create snapshots) is supported as well.  But to change the number of copies in a mirrored logical 
volume use lvconvert (8).

Sizes will be rounded if necessary - for example, the volume size must be an exact number
of extents and the size of a striped segment must be a multiple of the number of stripes.

from: lvreduce manpage

Example
-------
Reduce /dev/mapper/data-music logical volume from 1TB to 500GB:
bornite:~# lvreduce -L500G /dev/mapper/data-music


Sat Apr 17 10:41:57 AKDT 2010
=============================
Need to take 500GB from /date/music/ and add to /data/movies/.
Looks likes resize2fs, lvreduce, lvextend are the tools for the job.

bornite:/backups/00BACKUPS# lvdisplay /dev/data/music 
  --- Logical volume ---
  LV Name                /dev/data/music
  VG Name                data
  LV UUID                0UBPs0-hgAX-6Htx-hAm2-S5sX-lT2o-Vrzdud
  LV Write Access        read/write
  LV Status              available
  # open                 1
  LV Size                1000.00 GB
  Current LE             256000
  Segments               1
  Allocation             inherit
  Read ahead sectors     0
  Block device           253:1

bornite:~# lvdisplay /dev/data/movies 
  --- Logical volume ---
  LV Name                /dev/data/movies
  VG Name                data
  LV UUID                dkZcFm-SQ5S-3eKm-EZHl-2QM7-z0LF-3KAv11
  LV Write Access        read/write
  LV Status              available
  # open                 1
  LV Size                500.00 GB
  Current LE             128000
  Segments               1
  Allocation             inherit
  Read ahead sectors     0
  Block device           253:12
   

1. Take backup of /data
bornite:/backups/00BACKUPS# ./backup
SRC: /data/
SRCTXT: -data
BASE: /backups/00BACKUPS
TAR: /backups/00BACKUPS/20100417-data
LAST: 20100331-data
Creating backup...

building file list ...
3494433 files to consider
deleting movies/tivo/Tivo Transfers/
00TARBALLS/commercial/uex/
00TARBALLS/commercial/uex/README
        1181 100%    0.00kB/s    0:00:00 (xfer#1, to-check=368260/3494433)
00TARBALLS/commercial/uex/uex-1.2.0.1_amd64.tar.gz
    34124103 100%   44.40MB/s    0:00:00 (xfer#2, to-check=368253/3494433)
...
svnroot/uaa/db/revs/4914
        5753 100%    4.16kB/s    0:00:01 (xfer#726, to-check=26641/3494433)
svnroot/uaa/db/transactions/

Number of files: 3494433
Number of files transferred: 726
Total file size: 1898261218435 bytes
Total transferred file size: 288036885984 bytes
Literal data: 294481483232 bytes
Matched data: 0 bytes
File list size: 78069431
File list generation time: 899.677 seconds
File list transfer time: 0.000 seconds
Total bytes sent: 294595533875
Total bytes received: 16820

sent 294595533875 bytes  received 16820 bytes  34481834.22 bytes/sec
total size is 1898261218435  speedup is 6.44

real	145m13.693s
user	34m28.005s
sys	24m23.611s
bornite:~#

2. Unmount /data/music
bornite:~# umount /data/music

3. Reduce size of /data/music/ ext3 filesystem.
Resize ext3 filesystem on /data/music from 1000G to 500G with resize2fs.

The resizefs utility required e2fsck first:
bornite:~# e2fsck -f /dev/mapper/data-music
e2fsck 1.40-WIP (14-Nov-2006)
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information
/dev/mapper/data-music: 81832/131072000 files (3.1% non-contiguous), 
73899375/262144000 blocks
bornite:~#

Resize /data/music from 1TB to 500GB:
bornite:~# resize2fs /dev/mapper/data-music 500G
resize2fs 1.40-WIP (14-Nov-2006)
Resizing the filesystem on /dev/mapper/data-music to 131072000 (4k) blocks.
The filesystem on /dev/mapper/data-music is now 131072000 blocks long.

4. Reduce /dev/data/music volume from 1TB to 500GB:
bornite:~# lvreduce -L500G /dev/data/music
  WARNING: Reducing active logical volume to 500.00 GB
  THIS MAY DESTROY YOUR DATA (filesystem etc.)
Do you really want to reduce music? [y/n]: y
  Reducing logical volume music to 500.00 GB
  Logical volume music successfully resized
bornite:~# 

bornite:~# lvdisplay /dev/data/music 
  --- Logical volume ---
  LV Name                /dev/data/music
  VG Name                data
  LV UUID                0UBPs0-hgAX-6Htx-hAm2-S5sX-lT2o-Vrzdud
  LV Write Access        read/write
  LV Status              available
  # open                 0
  LV Size                500.00 GB
  Current LE             128000
  Segments               1
  Allocation             inherit
  Read ahead sectors     0
  Block device           253:1

5. Mount /dev/mapper/music to /data/music/

6. Check filecount:
bornite:~# ls -l /data/music/ | wc -l
5328

bornite:~# ls -l /backups/00BACKUPS/20100417-data/music/ | wc -l
5328

Reduction of /data/music from 1TB to 500GB looks good!

7. Unmount /data/movies/
bornite:~# umount /data/movies
umount: /data/movies: device is busy
umount: /data/movies: device is busy

Stopping samba did the trick:
bornite:/etc/init.d# ./samba stop
Stopping Samba daemons: nmbd smbd.
bornite:/etc/init.d# umount /data/movies/

8. Increase size of /data/movies from 500GB to 1TB:
bornite:~# lvextend -L1000G /dev/data/movies
  Extending logical volume movies to 1000.00 GB
  Logical volume movies successfully resized

9. Resize /data/movies from 500GB to 1TB:
bornite:~# e2fsck -f /dev/mapper/data-movies
e2fsck 1.40-WIP (14-Nov-2006)
Pass 1: Checking inodes, blocks, and sizes
Pass 2: Checking directory structure
Pass 3: Checking directory connectivity
Pass 4: Checking reference counts
Pass 5: Checking group summary information
/dev/mapper/data-movies: 635/65536000 files (19.1% non-contiguous), 
115844725/131072000 blocks

bornite:~# resize2fs /dev/mapper/data-movies 1000G
resize2fs 1.40-WIP (14-Nov-2006)
Resizing the filesystem on /dev/mapper/data-movies to 262144000 (4k) blocks.
The filesystem on /dev/mapper/data-movies is now 262144000 blocks long.

Looks good.

10. Mount /data/movies

bornite:~# mount /data/movies/
bornite:~# vgdisplay /dev/data/movies 
  Invalid volume group name: data/movies
bornite:~# vgdisplay /dev/mapper/data-movies 
  Invalid volume group name: mapper/data-movies
bornite:~# lvdisplay /dev/data/movies 
  --- Logical volume ---
  LV Name                /dev/data/movies
  VG Name                data
  LV UUID                dkZcFm-SQ5S-3eKm-EZHl-2QM7-z0LF-3KAv11
  LV Write Access        read/write
  LV Status              available
  # open                 1
  LV Size                1000.00 GB
  Current LE             256000
  Segments               2
  Allocation             inherit
  Read ahead sectors     0
  Block device           253:12

Looks good.

bornite:~# ls -l /data/movies/tivo/ | wc -l
149

bornite:~# ls -l /backups/00BACKUPS/20100417-data/movies/tivo/ | wc -l
149

bornite:/etc/init.d# ./samba start
Starting Samba daemons: nmbd smbd.

Yeh hah.  Mission accomplished.


Fri Jan 22 09:34:47 AKST 2010
=============================
Want to take 500GB from /data/movies volume and add to /data/00BACKUPS.
Looks like resize2fs to shrink the ext3 filesystem then lvreduce to shrink the volume.

1. Take backup of /data/movies volume.
bornite:/backups/00BACKUPS# ./backup
SRC: /data/
SRCTXT: -data
BASE: /backups/00BACKUPS
TAR: /backups/00BACKUPS/20100122-data
LAST: 20100116-data
Creating backup...
building file list ...
building file list ...
3155382 files to consider
deleting 00BACKUPS/terminus/20091002/
deleting 00TARBALLS/multimedia/asciidoc-8.4.2/vim/syntax/asciidoc.vim
deleting 00TARBALLS/multimedia/asciidoc-8.4.2/vim/syntax/
...
wallpaper/.Trash-1000/files/thetismoon2k72-1152.jpg
      320795 100%    1.64MB/s    0:00:00 (xfer#2313, to-check=251/3155382)

Number of files: 3155382
Number of files transferred: 2313
Total file size: 1440494066358 bytes
Total transferred file size: 1862636020 bytes
Literal data: 1862636020 bytes
Matched data: 0 bytes
File list size: 70223160
File list generation time: 999.416 seconds
File list transfer time: 0.000 seconds
Total bytes sent: 1933193324
Total bytes received: 53204

sent 1933193324 bytes  received 53204 bytes  896890.06 bytes/sec
total size is 1440494066358  speedup is 745.12

real    38m17.510s
user    1m1.512s
sys     2m31.109s
bornite:/backups/00BACKUPS# 

bornite:/backups/00BACKUPS/20100122-data/movies# find . | wc -l
506

bornite:/data/movies# find . | wc -l
506

Backup looks good.

2. Resize ext3 filesystem on /data/movies from 1000G to 500G with resize2fs.

bornite:~# resize2fs /dev/mapper/data-movies 500G

3. Restore /data/movies data.

bornite:~# time rsync -va /backups/00BACKUPS/20100122-data/movies/ /data/movies
building file list ... done
./
500kV_Switch.mpg
MD5SUM-20100102
MD5SUM-20100102-duplicates.txt
DVD_VIDEO/
...
tivo/Wide Angle - Back to School (Recorded Wed Jul 18 2007 01 00AM KAKM).TiVo

sent 149497836615 bytes  received 10480 bytes  56552996.82 bytes/sec
total size is 149479555911  speedup is 1.00

real    44m3.900s
user    16m50.227s
sys     16m56.428s
bornite:~#

3. Reduce /dev/data/movies logical volume from 1TB to 500GB:

bornite:~# lvreduce -L500G /dev/data/movies
  WARNING: Reducing active logical volume to 500.00 GB
  THIS MAY DESTROY YOUR DATA (filesystem etc.)
Do you really want to reduce movies? [y/n]: y
  Reducing logical volume movies to 500.00 GB
  Logical volume movies successfully resized
bornite:~#


FIXME: Need some more data here.

marcilr@bornite:~$ uname -a
Linux bornite 2.6.18-6-486 #1 Thu Nov 5 15:58:19 UTC 2009 i686 GNU/Linux


Links
=====
How To Resize ext3 Partitions Without Losing Data
This page has some great info.  Including how to remove then add 
back the ext3 journal.  Very useful since resize2fs only works on 
ext2 not ext3.
http://www.howtoforge.com/linux_resizing_ext3_partitions

Linux ext3 FAQ
http://batleth.sapienti-sat.org/projects/FAQs/ext3-faq.html

LVM HOWTO - AJ Lewis
http://tldp.org/HOWTO/LVM-HOWTO/

11.9. Extending a logical volume
LVM HOWTO
http://tldp.org/HOWTO/LVM-HOWTO/extendlv.html

11.10. Reducing a logical volume
LVM HOWTO
http://tldp.org/HOWTO/LVM-HOWTO/reducelv.html
